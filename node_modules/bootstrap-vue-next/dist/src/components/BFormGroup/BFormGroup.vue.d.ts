import { type PropType } from 'vue';
import type { Booleanish } from '../../types';
export declare const SLOT_NAME_LABEL = "label";
export declare const SLOT_NAME_INVALID_FEEDBACK = "invalid-feedback";
export declare const SLOT_NAME_VALID_FEEDBACK = "valid-feedback";
export declare const SLOT_NAME_DESCRIPTION = "description";
export declare const SLOT_NAME_DEFAULT = "default";
declare const _sfc_main: import("vue").DefineComponent<{
    contentCols: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsLg: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsMd: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsSm: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsXl: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    description: {
        type: StringConstructor[];
        default: undefined;
    };
    disabled: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    feedbackAriaLive: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    invalidFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    labelAlign: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignLg: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignMd: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignSm: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignXl: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelClass: {
        type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        default: undefined;
    };
    labelCols: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsLg: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsMd: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsSm: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsXl: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelFor: {
        type: StringConstructor;
        default: undefined;
    };
    labelSize: {
        type: StringConstructor;
        default: undefined;
    };
    labelSrOnly: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    state: {
        type: PropType<Booleanish>;
        default: null;
    };
    tooltip: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    validFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    validated: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    floating: {
        type: PropType<Booleanish>;
        default: boolean;
    };
}, {
    disabledBoolean: Readonly<import("vue").Ref<boolean>>;
    labelSrOnlyBoolean: Readonly<import("vue").Ref<boolean>>;
    stateBoolean: Readonly<import("vue").Ref<boolean>>;
    tooltipBoolean: Readonly<import("vue").Ref<boolean>>;
    validatedBoolean: Readonly<import("vue").Ref<boolean>>;
    floatingBoolean: Readonly<import("vue").Ref<boolean>>;
    ariaDescribedby: string | null;
    computedAriaInvalid: import("vue").ComputedRef<boolean | "true" | "false" | "grammar" | "spelling" | undefined>;
    contentColProps: import("vue").ComputedRef<any>;
    isHorizontal: import("vue").ComputedRef<boolean>;
    labelAlignClasses: import("vue").ComputedRef<string[]>;
    labelColProps: import("vue").ComputedRef<any>;
    onLegendClick: (event: MouseEvent) => void;
    stateClass: import("vue").ComputedRef<"is-valid" | "is-invalid" | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    contentCols: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsLg: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsMd: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsSm: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    contentColsXl: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    description: {
        type: StringConstructor[];
        default: undefined;
    };
    disabled: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    feedbackAriaLive: {
        type: StringConstructor;
        default: string;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    invalidFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    labelAlign: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignLg: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignMd: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignSm: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelAlignXl: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelClass: {
        type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        default: undefined;
    };
    labelCols: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsLg: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsMd: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsSm: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelColsXl: {
        type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
        default: undefined;
    };
    labelFor: {
        type: StringConstructor;
        default: undefined;
    };
    labelSize: {
        type: StringConstructor;
        default: undefined;
    };
    labelSrOnly: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    state: {
        type: PropType<Booleanish>;
        default: null;
    };
    tooltip: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    validFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    validated: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    floating: {
        type: PropType<Booleanish>;
        default: boolean;
    };
}>>, {
    id: string;
    disabled: Booleanish;
    floating: Booleanish;
    validated: Booleanish;
    state: Booleanish;
    labelFor: string;
    label: string;
    contentCols: string | number | boolean;
    contentColsLg: string | number | boolean;
    contentColsMd: string | number | boolean;
    contentColsSm: string | number | boolean;
    contentColsXl: string | number | boolean;
    description: string;
    feedbackAriaLive: string;
    invalidFeedback: string;
    labelAlign: string | number | boolean;
    labelAlignLg: string | number | boolean;
    labelAlignMd: string | number | boolean;
    labelAlignSm: string | number | boolean;
    labelAlignXl: string | number | boolean;
    labelClass: string | unknown[] | Record<string, any>;
    labelCols: string | number | boolean;
    labelColsLg: string | number | boolean;
    labelColsMd: string | number | boolean;
    labelColsSm: string | number | boolean;
    labelColsXl: string | number | boolean;
    labelSize: string;
    labelSrOnly: Booleanish;
    tooltip: Booleanish;
    validFeedback: string;
}>;
export default _sfc_main;
